{"ast":null,"code":"import _classCallCheck from \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/src/comps/postContainer/post.js\";\nimport React from 'react';\nimport { Comments } from '../commentSection/comments.js';\nimport './post.css';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { Post, InnerPostCont, PostHeading, PostImg } from '../styledComponets.js';\nexport var PostsPage =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PostsPage, _React$Component);\n\n  function PostsPage(props) {\n    var _this;\n\n    _classCallCheck(this, PostsPage);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PostsPage).call(this, props));\n\n    _this.captureInput = function (event) {\n      var input = event.target.value;\n\n      _this.setState({\n        currentInput: input\n      });\n    };\n\n    _this.captureLikes = function (event) {\n      var newData = _this.props.data.slice();\n\n      newData.forEach(function (post) {\n        if (post.thumbnailUrl === event.target.dataset.tab) {\n          post.likes += 1;\n        }\n      });\n\n      _this.props.updateStateCB(newData);\n    };\n\n    _this.enterKeyPressComments = function (event) {\n      var form = document.querySelector('.addComment');\n\n      var newData = _this.props.data.slice();\n\n      var newTimeAndComment = newData.map(function (post) {\n        if (post.thumbnailUrl === event.target.dataset.tab) {\n          var newComment = {\n            username: _this.state.user,\n            text: _this.state.currentInput\n          };\n          var timestamp = moment();\n          var timePassed = timestamp.fromNow();\n          post.timePassed = timePassed;\n          post.comments.push(newComment);\n          post.timestamp = timestamp;\n        }\n\n        return post;\n      });\n\n      _this.props.updateStateCB(newTimeAndComment);\n\n      event.preventDefault();\n      form.reset();\n    };\n\n    _this.deleteKeyPressComments = function (event) {\n      var newData = _this.props.data.slice();\n\n      if (event.target.className === 'userComUser' || event.target.className === 'userComText') {\n        newData = newData.map(function (post) {\n          var newComments = post.comments.filter(function (comment, index) {\n            if (index.toString() + post.thumbnailUrl !== event.target.dataset.tab) {\n              return comment;\n            }\n          });\n          post.comments = newComments;\n          return post;\n        });\n\n        var deleteConfirmation = function deleteConfirmation(event) {\n          var confirmation = prompt('Are you sure you want to delete the comment? Y/N?');\n\n          if (confirmation === null) {\n            confirmation = 'n';\n          }\n\n          if (confirmation.toLowerCase() === 'y') {\n            _this.props.updateStateCB(newData);\n          }\n        };\n\n        deleteConfirmation();\n      }\n    };\n\n    _this.updateTime = function (timeSet) {\n      window.setInterval(timeSet, 900000);\n    };\n\n    _this.initialTime = function (timeSet) {\n      window.setTimeout(timeSet, 10);\n    };\n\n    _this.initialTimeSet = function () {\n      var newData = _this.props.data.slice();\n\n      var newTimePassed = newData.map(function (post) {\n        var timestamp = post.timestamp;\n        var dateObject = moment(timestamp, 'MMMM-DD-YYYY HH:mm:ss');\n        dateObject = JSON.stringify(dateObject);\n        dateObject = JSON.parse(dateObject);\n        dateObject = new Date(dateObject);\n        dateObject = moment(dateObject);\n        var timePassed = dateObject.fromNow();\n        post.timePassed = timePassed;\n        return post;\n      });\n\n      _this.props.updateStateCB(newTimePassed);\n    };\n\n    _this.state = {\n      user: props.user,\n      currentInput: ' ',\n      timePassed: []\n    };\n    return _this;\n  }\n\n  _createClass(PostsPage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.initialTime(this.initialTimeSet);\n      this.updateTime(this.initialTimeSet);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return (// <div className=\"postContainer\">\n        React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, React.createElement(Post, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, this.props.data.map(function (post) {\n          return React.createElement(InnerPostCont, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126\n            },\n            __self: this\n          }, React.createElement(PostHeading, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            className: \"thumb\",\n            src: post.thumbnailUrl,\n            alt: \"${post.username} thumbnail\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 128\n            },\n            __self: this\n          }), React.createElement(\"h2\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 133\n            },\n            __self: this\n          }, post.username)), React.createElement(PostImg, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 135\n            },\n            __self: this\n          }, React.createElement(\"img\", {\n            src: post.imageUrl,\n            className: \"postImage\",\n            alt: \"{post.username} image\",\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          })), React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142\n            },\n            __self: this\n          }, React.createElement(Comments, {\n            comments: post.comments,\n            likes: post.likes,\n            dataTab: post.thumbnailUrl,\n            likesClick: _this2.captureLikes,\n            input: _this2.captureInput,\n            addComment: _this2.enterKeyPressComments,\n            timePassed: post.timePassed,\n            delete: _this2.deleteKeyPressComments,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143\n            },\n            __self: this\n          })));\n        })))\n      );\n    }\n  }]);\n\n  return PostsPage;\n}(React.Component);\nPostsPage.propTypes = {\n  data: PropTypes.array,\n  updateStateCB: PropTypes.func\n};","map":{"version":3,"sources":["/home/dickwinters/lambda/secondInstaClone/React-Insta-Clone/instagram/src/comps/postContainer/post.js"],"names":["React","Comments","moment","PropTypes","Post","InnerPostCont","PostHeading","PostImg","PostsPage","props","captureInput","event","input","target","value","setState","currentInput","captureLikes","newData","data","slice","forEach","post","thumbnailUrl","dataset","tab","likes","updateStateCB","enterKeyPressComments","form","document","querySelector","newTimeAndComment","map","newComment","username","state","user","text","timestamp","timePassed","fromNow","comments","push","preventDefault","reset","deleteKeyPressComments","className","newComments","filter","comment","index","toString","deleteConfirmation","confirmation","prompt","toLowerCase","updateTime","timeSet","window","setInterval","initialTime","setTimeout","initialTimeSet","newTimePassed","dateObject","JSON","stringify","parse","Date","imageUrl","Component","propTypes","array","func"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Comments} from '../commentSection/comments.js';\nimport './post.css';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport {Post, InnerPostCont, PostHeading, PostImg} from '../styledComponets.js';\n\nexport class PostsPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: props.user,\n      currentInput: ' ',\n      timePassed: [],\n    };\n  }\n\n  componentDidMount() {\n    this.initialTime(this.initialTimeSet);\n    this.updateTime(this.initialTimeSet);\n  }\n\n  captureInput = event => {\n    let input = event.target.value;\n    this.setState({currentInput: input});\n  };\n\n  captureLikes = event => {\n    let newData = this.props.data.slice();\n    newData.forEach(post => {\n      if (post.thumbnailUrl === event.target.dataset.tab) {\n        post.likes += 1;\n      }\n    });\n    this.props.updateStateCB(newData);\n  };\n\n  enterKeyPressComments = event => {\n    let form = document.querySelector('.addComment');\n    let newData = this.props.data.slice();\n    let newTimeAndComment = newData.map(post => {\n      if (post.thumbnailUrl === event.target.dataset.tab) {\n        let newComment = {\n          username: this.state.user,\n          text: this.state.currentInput,\n        };\n        const timestamp = moment();\n        const timePassed = timestamp.fromNow();\n        post.timePassed = timePassed;\n        post.comments.push(newComment);\n        post.timestamp = timestamp;\n      }\n      return post;\n    });\n    this.props.updateStateCB(newTimeAndComment);\n    event.preventDefault();\n    form.reset();\n  };\n\n  deleteKeyPressComments = event => {\n    let newData = this.props.data.slice();\n    if (\n      event.target.className === 'userComUser' ||\n      event.target.className === 'userComText'\n    ) {\n      newData = newData.map(post => {\n        let newComments = post.comments.filter((comment, index) => {\n          if (\n            index.toString() + post.thumbnailUrl !==\n            event.target.dataset.tab\n          ) {\n            return comment;\n          }\n        });\n        post.comments = newComments;\n        return post;\n      });\n\n      const deleteConfirmation = event => {\n        let confirmation = prompt(\n          'Are you sure you want to delete the comment? Y/N?',\n        );\n        if (confirmation === null) {\n          confirmation = 'n';\n        }\n        if (confirmation.toLowerCase() === 'y') {\n          this.props.updateStateCB(newData);\n        }\n      };\n      deleteConfirmation();\n    }\n  };\n\n  updateTime = timeSet => {\n    window.setInterval(timeSet, 900000);\n  };\n\n  initialTime = timeSet => {\n    window.setTimeout(timeSet, 10);\n  };\n\n  initialTimeSet = () => {\n    const newData = this.props.data.slice();\n    let newTimePassed = newData.map(post => {\n      const timestamp = post.timestamp;\n      let dateObject = moment(timestamp, 'MMMM-DD-YYYY HH:mm:ss');\n      dateObject = JSON.stringify(dateObject);\n      dateObject = JSON.parse(dateObject);\n      dateObject = new Date(dateObject);\n      dateObject = moment(dateObject);\n      const timePassed = dateObject.fromNow();\n      post.timePassed = timePassed;\n      return post;\n    });\n    this.props.updateStateCB(newTimePassed);\n  };\n\n  render() {\n    return (\n      // <div className=\"postContainer\">\n\n      <div>\n        <Post>\n          {this.props.data.map(post => {\n            return (\n              <InnerPostCont>\n                <PostHeading>\n                  <img\n                    className=\"thumb\"\n                    src={post.thumbnailUrl}\n                    alt=\"${post.username} thumbnail\"\n                  />\n                  <h2>{post.username}</h2>\n                </PostHeading>\n                <PostImg>\n                  <img\n                    src={post.imageUrl}\n                    className=\"postImage\"\n                    alt=\"{post.username} image\"\n                  />\n                </PostImg>\n                <div>\n                  <Comments\n                    comments={post.comments}\n                    likes={post.likes}\n                    dataTab={post.thumbnailUrl}\n                    likesClick={this.captureLikes}\n                    input={this.captureInput}\n                    addComment={this.enterKeyPressComments}\n                    timePassed={post.timePassed}\n                    delete={this.deleteKeyPressComments}\n                  />\n                </div>\n              </InnerPostCont>\n            );\n          })}\n        </Post>\n      </div>\n    );\n  }\n}\n\nPostsPage.propTypes = {\n  data: PropTypes.array,\n  updateStateCB: PropTypes.func,\n};\n"]},"metadata":{},"sourceType":"module"}